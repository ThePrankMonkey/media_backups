#! /usr/bin/python3

"""
Constantly monitors a folder to process Overdrive work
"""

import logging
import os
import sys
import subprocess
import shutil
import time

logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)


PATH_AUDIOBOOKS = "/Audiobooks"
PATH_AUDIOBOOKS_FAILURES = os.path.join(PATH_AUDIOBOOKS, "history", "failures")
PATH_AUDIOBOOKS_SUCCESSES = os.path.join(PATH_AUDIOBOOKS, "history", "successes")
AUDIOBOOKS_EXTENSION = ".odm"
AUDIOBOOKS_BINARY = 'overdrive'
PATH_EBOOKS = "/Ebooks"
PATH_EBOOKS_FAILURES = os.path.join(PATH_EBOOKS, "history", "failures")
PATH_EBOOKS_SUCCESSES = os.path.join(PATH_EBOOKS, "history", "successes")
PATH_EBOOKS_BACKUPS = os.path.join(PATH_EBOOKS, "backups")
EBOOKS_EXTENSION = ".acsm"
EBOOKS_BINARY = 'knock'
SLEEP_IN_SECONDS = int(os.environ.get("OVERDRIVE_SLEEP", 5*60))


# Prep, make sure needed paths exist
paths = [
    PATH_AUDIOBOOKS,
    PATH_AUDIOBOOKS_FAILURES,
    PATH_AUDIOBOOKS_SUCCESSES,
    PATH_EBOOKS,
    PATH_EBOOKS_FAILURES,
    PATH_EBOOKS_SUCCESSES,
    PATH_EBOOKS_BACKUPS,
]
for path in paths:
    if not os.path.exists(path):
        sys.exit(f"Expected path [{path}] is missing.")
# Prep, make sure binaries exists
binaries = [
    AUDIOBOOKS_BINARY,
    EBOOKS_BINARY,
]
for binary in binaries:
    if not shutil.which(binary):
        sys.exit(f"Expected binary [{binary}] is not part of PATH.")


class Processor():
    def __init__(self):
        self.borrow_type = ""
        self.main_path = ""
        self.failure_path = ""
        self.success_path = ""
        self.command = []
        self.extension = ""
    @staticmethod
    def move_file(file_name, destination):
        if os.path.exists(file_name):
            try:
                os.rename(file_name, os.path.join(destination, file_name))
                logger.info(f"Moved {file_name}")
            except:
                logger.error(f"Could not move {file_name}")
        else:
            logger.warning(f"No {file_name}")
    @staticmethod
    def get_files_to_move(new_file):
        return [new_file]
    def move_backups(self, new_file):
        pass
    def process_folder(self):
        # Go to Folder
        logger.debug(f"Entering {self.main_path}")
        os.chdir(self.main_path)
        # Check input folder for new files
        new_files = [f for f in os.listdir() if f.lower().endswith(self.extension)]
        logger.debug(f"Found {len(new_files)}: {new_files}")
        # Process new files
        for new_file in new_files:
            destination = self.failure_path
            # Execute download command
            download_command = self.command + [new_file]
            logger.debug(download_command)
            download_results = subprocess.run(download_command)
            logger.info(f"Download status = {download_results.returncode}")
            # If successful, change destination path
            if download_results.returncode == 0:
                logger.info(f"{self.borrow_type} for {new_file} downloaded.")
                destination = self.success_path
                self.move_backups(new_file)
            else:
                logger.error(f"{self.borrow_type} for {new_file} not downloaded.")
            # Move files
            files_to_move = self.get_files_to_move(new_file)
            for file_to_move in files_to_move:
                self.move_file(file_to_move, destination)


class AudioProcessor(Processor):
    def __init__(self):
        self.borrow_type = "Audiobook"
        self.main_path = PATH_AUDIOBOOKS
        self.failure_path = PATH_AUDIOBOOKS_FAILURES
        self.success_path = PATH_AUDIOBOOKS_SUCCESSES
        self.command = [AUDIOBOOKS_BINARY, "download"]
        self.extension = AUDIOBOOKS_EXTENSION
    @staticmethod
    def get_files_to_move(new_file):
        return [
            new_file, 
            f"{new_file}.license", 
            f"{new_file}.metadata", 
        ]


class BookProcessor(Processor):
    def __init__(self):
        self.borrow_type = "Ebook"
        self.main_path = PATH_EBOOKS
        self.failure_path = PATH_EBOOKS_FAILURES
        self.success_path = PATH_EBOOKS_SUCCESSES
        self.backups_path = PATH_EBOOKS_BACKUPS
        self.command = [EBOOKS_BINARY]
        self.extension = EBOOKS_EXTENSION
    def move_backups(self, new_file):
        new_epub = f"{os.path.splitext(new_file)[0]}.epub"
        self.move_file(new_epub, self.backups_path)


def main():
    logger.info(f"Starting to monitor for files")
    processor_audiobook = AudioProcessor()
    processor_ebook = BookProcessor()
    while True:
        processor_audiobook.process_folder()
        processor_ebook.process_folder()
        time.sleep(SLEEP_IN_SECONDS)

if __name__ == "__main__":
    main()