#! /usr/bin/python3

"""
Constantly monitors a folder to process Overdrive work
"""

import logging
import os
import sys
import subprocess
import shutil
import time

logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)


PATH_AUDIOBOOKS = "/Audiobooks"
PATH_AUDIOBOOKS_FAILURES = os.path.join(PATH_AUDIOBOOKS, "history", "failures")
PATH_AUDIOBOOKS_SUCCESSES = os.path.join(PATH_AUDIOBOOKS, "history", "successes")
AUDIOBOOKS_EXTENSION = ".odm"
OVERDRIVE_BINARY = 'overdrive'
SLEEP_IN_SECONDS = int(os.environ.get("OVERDRIVE_SLEEP", 5*60))


# Prep, make sure needed paths exist
paths = [
    PATH_AUDIOBOOKS,
    PATH_AUDIOBOOKS_FAILURES,
    PATH_AUDIOBOOKS_SUCCESSES,
]
for path in paths:
    if not os.path.exists(path):
        sys.exit(f"Expected path [{path}] is missing.")
# Prep, make sure binaries exists
binaries = [
    OVERDRIVE_BINARY,
]
for binary in binaries:
    if not shutil.which(binary):
        sys.exit(f"Expected binary [{binary}] is not part of PATH.")

def move_file(file_name, destination):
        if os.path.exists(file_name):
            try:
                os.rename(file_name, os.path.join(destination, file_name))
                logger.info(f"Moved {file_name}")
            except:
                logger.error(f"Could not move {file_name}")
        else:
            logger.warning(f"No {file_name}")

def process_folder():
    # Go to /Audiobooks
    os.chdir(PATH_AUDIOBOOKS)
    # Check input folder for new *.odm
    new_odms = [f for f in os.listdir() if f.lower().endswith(OVERDRIVE_EXTENSION)]
    # Move Found ODM to Audiobooks
    for new_odm in new_odms:
        destination = PATH_FAILURES
        # Execute overdrive download
        download_results = subprocess.run([OVERDRIVE_BINARY, "download", new_odm])
        logger.info(f"Download status = {download_results.returncode}")
        # If successful, change destination path
        if download_results.returncode == 0:
            logger.info(f"Audiobook for {new_odm} downloaded.")
            destination = PATH_SUCCESSES
        else:
            logger.error(f"Audiobook for {new_odm} not downloaded.")
        # Move files
        files_to_move = [
            new_odm, 
            f"{new_odm}.license", 
            f"{new_odm}.metadata", 
        ]
        for file_to_move in files_to_move:
            move_file(file_to_move, destination)

def main():
    logger.info(f"Starting to monitor {PATH_AUDIOBOOKS}")
    while True:
        process_folder()
        time.sleep(SLEEP_IN_SECONDS)

if __name__ == "__main__":
    main()